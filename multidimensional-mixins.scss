// Set the global $disc-direction;
// This is set in the main manifest file.
// $disc-direction: ltr;

// Set the html direction -- it has to happen somewhere, maybe not here.
html {
  direction: $disc-direction;
}

// Utility functions

// Returns the current default float direction.
@function disc-default-float() {
  @return if($disc-direction == ltr, left, right); // if() is the sass ternary operator.
}

// Swaps values right/left and top/bottom. It passes all other values unaltered.
@function disc-switch-direction($dir) {
  @if $dir == left {
    @return right;
  } @elseif $dir == right {
    @return left;
  } @elseif $dir == top {
    @return bottom;
  } @elseif $dir == bottom {
    @return top;
  } @else {
    @return $dir;
  }
}

// Utility mixins

// Append a direction onto a property name and give it a length value.
@mixin property-direction-length($property, $direction, $length) {
  #{$property}-#{$direction}: $length;
}

// Create a margin of a given direction and length.
@mixin margin-direction-length($direction, $length) {
  margin-#{$direction}: $length;
}

// Create padding of a given direction and length.
@mixin padding-direction-length($direction, $length) {
  padding-#{$direction}: $length;
}

// Used to align a property to either left of right.
// This is used to create the float and text-align mixins.
@mixin property-align($property, $alignment) {
  @if disc-default-float() == left {
    #{$property}: $alignment;
  } @else {
    #{$property}: disc-switch-direction($alignment);
  }
}

// Used to create the left and right mixins.
@mixin position-distance($position, $dist) {
  @if disc-default-float() == left {
    #{$position}: $dist;
  } @else {
    $position: disc-switch-direction($position);
    #{$position}: $dist;
  }
}

// Creates a border of the given direction and properties - used in the border-left()
// and border-right() mixins.
@mixin border-direction($dir, $border-properties) {
  border-#{$dir}: $border-properties;
}

// Remove the nth item from a list. It's used to remove the !important flag from a list
// in the next function.
@function disc-remove-nth($list, $index) {
  $result: ();
  $index: if($index < 0, length($list) + $index + 1, $index);
  @for $i from 1 through length($list) {
    @if $i != $index {
      $result: append($result, nth($list, $i));
    }
  }
  @return $result;
}

// Used to create the margin and padding mixins - takes a list as an argument to
// simplify search-and-replace in Discourse source code.
// Create a property with values of $lengths. The lengths are structured to represent
// the css pattern for margin and padding arguments.If disc-default-float() == right _and_ there
// are four length elements, switch the right/left values - the second and fourth elements on the list.
@mixin property-with-lengths($property, $lengths) {
  $arg-list-length: length($lengths);
  $important: null;
  $property-lengths: ();

  // If the last value of the lengths list is !important, remove it and update the !important variable
  @if nth($lengths, $arg-list-length) == '!important' {
    $property-lengths: disc-remove-nth($lengths, $arg-list-length);
    $important: '!important';
  } @else {
    $property-lengths: $lengths;
  }

  // If there are less than 4 values, they are symmetrical for left and right,
  // we can leave them alone.
  @if length($property-lengths) < 4 {
    #{$property}: $property-lengths if($important, $important, null); // `if()` is the sass ternary operator
  } @elseif length($property-lengths) == 4 {
    @if disc-default-float() == left {
      #{$property}: $property-lengths if($important, $important, null);
    } @else {
      // Default float is right - we need to switch the left and right values.
      #{$property}: nth($property-lengths, 1) nth($property-lengths, 4)
      nth($property-lengths, 3) nth($property-lengths, 2) if($important, $important, null);
    }
  } @else {
    @warn "The `property-with-lengths()` function can take a maximum of 4 lengths";
  }
}

// 'Public' mixins

// Used to switch the left/right float values depending on the disc-default-float() value;
// To be used as a replacement for float: $dir;
@mixin float($dir) {
  @include property-align(float, $dir);
}

// To be used as a replacement for text-align: $dir;
@mixin text-align($dir) {
  @include property-align(text-align, $dir);
}

// To be used in place of margin-left: $length;
@mixin margin-left($length) {
  $dir: if(disc-default-float() == left, left, right);
  @include margin-direction-length($dir, $length);
}

// To be used in place of margin-right: $length;
@mixin margin-right($length) {
  $dir: if(disc-default-float() == left, right, left);
  @include margin-direction-length($dir, $length);
}

// To be used in place of padding-left: $length;
@mixin padding-left($length) {
  $dir: if(disc-default-float() == left, left, right);
  @include padding-direction-length($dir, $length);
}

// To be used in place of padding-right: $length;
@mixin padding-right($length) {
  $dir: if(disc-default-float() == left, right, left);
  @include padding-direction-length($dir, $length);
}

// To be used in place of border-left: $properties;
@mixin border-left($border-properties) {
  $dir: if(disc-default-float() == left, left, right);
  @include border-direction( $dir, $border-properties);
}

// To be used in place of border-right: $properties;
@mixin border-right($border-properties) {
  $dir: if(disc-default-float() == left, right, left);
  @include border-direction($dir, $border-properties);
}


// To be used in place of margin: $lengths;
@mixin margin($lengths) {
  @include property-with-lengths(margin, $lengths);
}

// To be used in place of padding: $lengths;
@mixin padding($lengths) {
  @include property-with-lengths(padding, $lengths);
}

// To be used in place of left: $dist;
@mixin left($dist) {
  @include position-distance(left, $dist);
}

// To be used in place of right: $dist;
@mixin right($dist)  {
  @include position-distance(right, $dist);
}
